import math
from config import TOKEN
from keyboard_pr import choose_chat_type_keyboard
import time
import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

smiles = {
    "Clear": "–Ø—Å–Ω–æüåû‚òÄ",
    "Clouds": "–û–±–ª–∞—á–Ω–æüå•‚òÅ",
    "Rain": "–î–æ–∂–¥—åüåßüíß",
    "Thunderstorm": "–ì—Ä–æ–∑–∞üå©‚ö°",
    "Snow": "–°–Ω–µ–≥üå®‚ùÑ",
    "Mist": "–¢—É–º–∞–Ωüå´"
}

documentation = "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:\n" \
                "/weather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ/—Å—Ç—Ä–∞–Ω–µ\n" \
                "/exitweather - –≤—ã–π—Ç–∏ –∏–∑ /weather\n" \
                "/rate - —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞/–µ–≤—Ä–æ/–≥—Ä—É–∑–∏–Ω—Å–∫–æ–≥–æ –ª–∞—Ä–∏/–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–≥–æ —Ç–µ–Ω–≥–µ/–∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —é–∞–Ω—è/—Ç—É—Ä–µ—Ü–∫–∏—Ö –ª–∏—Ä–∞\n" \
                "/exitrate - –≤—ã–π—Ç–∏ –∏–∑ /weather"


@dp.message_handler(commands=["start"], state="*")
async def start_handler(message: types.Message, state: FSMContext):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç,{message.from_user.first_name} !")
    time.sleep(1)
    await message.answer("–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ –º–µ–Ω—è –ø–æ–±–æ–ª—å—à–µ –≤–≤–µ–¥–∏—Ç–µ /help")


@dp.message_handler(commands=["help"], state="*")
async def help_handler(message: types.Message, state: FSMContext):
    await message.answer(f"{documentation}")


@dp.message_handler(commands=["weather"], state="*")
async def weather_handler(message: types.Message, state: FSMContext):
    await message.answer(f"{message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã")
    await state.set_state("get_weather")


@dp.message_handler(commands="exitweather", state="*")
async def exit_weather_handler(message: types.Message, state: FSMContext):
    await message.answer(f"{message.from_user.first_name}, –¥–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏)")


@dp.message_handler(state="get_weather")
async def get_weather_handler(message: types.message, state: FSMContext):
    city = message.text
    city = city.lower()
    await state.update_data({"name": city})
    try:
        response = requests.get(f"http://api.openweathermap.org/data/2.5/weather?q={city}&lang=ru&units=metric&appid=cc6d20e9665c2daf3845b0b3b127aa40")
        data = response.json()
        cityy = data["name"]
        temp = data["main"]["temp"]
        wet = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        weather_description = data["weather"][0]["main"]
        if weather_description in smiles:
            wd = smiles[weather_description]
        else:
            wd = "–Ø –Ω–µ –º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–ª–æ–≤, —á—Ç–æ–±—ã –æ–ø–∏—Å–∞—Ç—å —ç—Ç—É –ø–æ–≥–æ–¥—É"
        await message.reply(f"–ü–æ–≥–æ–¥–∞ –≤ {cityy}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}‚ÑÉ {wd}\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {wet}%\n"
                            f"–î–∞–≤–ª–µ–Ω–∏–µ: {math.ceil(pressure / 1.333)} –º–º.—Ä—Ç.—Å—Ç.\n"
                            f"–í–µ—Ç–µ—Ä: {wind} –º/c\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!‚ù§")
    except:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


@dp.message_handler(commands=["rate"], state="*")
async def rate_handler(message: types.Message, state: FSMContext):
    await message.answer(f"{message.from_user.first_name}, –≤—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É", reply_markup=choose_chat_type_keyboard)
    await state.set_state("get_rate")


@dp.message_handler(commands="exitrate", state="*")
async def exit_rate_handler(message: types.Message, state: FSMContext):
    await message.answer(f"{message.from_user.first_name}, –¥–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏)", reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state="get_rate")
async def get_rate_handler(message: types.message, state: FSMContext):
    text = message.text
    course = text[:3]
    await state.update_data({"course": course})
    response_rate = requests.get("https://www.cbr-xml-daily.ru/daily_json.js")
    dataa = response_rate.json()
    await message.answer(f"1 {dataa['Valute'][course]['Name']} = {dataa['Valute'][course]['Value']} —Ä—É–±–ª–µ–π")


@dp.message_handler(commands="plans")
async def plans_handler(message: types.message, state: FSMContext):
    await message.answer(f"–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ –ø–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å\n"
                         f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                         f"–ü–æ–≥—É–ª—è—Ç—å c —Å–æ–±–∞–∫–æ–π\n"
                         f"–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —É–∂–∏–Ω\n"
                         f"–£–±—Ä–∞—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ\n")
    await state.set_state("get_plans")


@dp.message_handler(state="get_plans")
async def get_plans_handler(message: types.message, state: FSMContext):
    #await state.update_data(plans=message.text)
    #data = await state.get_data()
    #data["plans"] = data['plans'].lower()
    #data["plans"] = data["plans"].split("\n")
    #print(data["plans"])
    pl = message.text
    pl = pl.split("\n")
    print(pl)
    await message.answer(f"–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –≤–≤–µ–¥–∏—Ç–µ /add, –∞ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —á—Ç–æ-—Ç–æ –≤–≤–µ–¥–∏—Ç–µ /delete")
    await state.set_state("add")


@dp.message_handler(commands="add", state="add")
async def plans_handler(message: types.message, state: FSMContext):
    await message.answer(f"{message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –∏ —è –ø–æ–ø–æ–ª–Ω—é —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫!")
    await state.set_state("get_add")


@dp.message_handler(state="get_add")
async def get_add_handler(message: types.message, state: FSMContext):
    #await state.update_data(new=message.text)
    #data = await state.get_data()
    #print(data)
    print(get_plans_handler)


executor.start_polling(dp, skip_updates=True)
